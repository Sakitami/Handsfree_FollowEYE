# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from handsfree_msgs/dissensor.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import std_msgs.msg

class dissensor(genpy.Message):
  _md5sum = "f0ccb07ca256b41b8ed9b394dd2e9265"
  _type = "handsfree_msgs/dissensor"
  _has_header = True #flag to mark the presence of a Header object
  _full_text = """std_msgs/Header header
uint16[] ult
uint16[] laser
uint16[] drop
int32 collision
float32 uwb_rssi
float32 uwb_distance
float32 ibeacon_rssi
float32 ibeacon_distance

#0(not click) 1(click) 2(double-click) 3(long-press)
uint8 button1
uint8 button2

#0 1(charging) 2(Charged)
uint8 atuo_charger_state 
uint8 hand_charger_state

#unit: 20~2000mm 
uint16 charger_distance 

#0(not find people) 1(find people)
uint8 thermal_infrared

uint8 vcc_motor_state
uint8 vcc_pc_state
uint8 pc_boot_up_state
uint8 break_stop_state

uint8 control_quality
uint8 chassis_online
uint8 col_drop_alarm
uint8 over_speed_state
uint8 motor1_online_state
uint8 motor2_online_state
uint8 motor1_mode_state
uint8 motor2_mode_state
uint8 motor1_fault_state
uint8 motor2_fault_state

uint8 mqtt_online
uint8 mqtt_get_topic_state
uint8 mqtt_command


================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id
"""
  __slots__ = ['header','ult','laser','drop','collision','uwb_rssi','uwb_distance','ibeacon_rssi','ibeacon_distance','button1','button2','atuo_charger_state','hand_charger_state','charger_distance','thermal_infrared','vcc_motor_state','vcc_pc_state','pc_boot_up_state','break_stop_state','control_quality','chassis_online','col_drop_alarm','over_speed_state','motor1_online_state','motor2_online_state','motor1_mode_state','motor2_mode_state','motor1_fault_state','motor2_fault_state','mqtt_online','mqtt_get_topic_state','mqtt_command']
  _slot_types = ['std_msgs/Header','uint16[]','uint16[]','uint16[]','int32','float32','float32','float32','float32','uint8','uint8','uint8','uint8','uint16','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,ult,laser,drop,collision,uwb_rssi,uwb_distance,ibeacon_rssi,ibeacon_distance,button1,button2,atuo_charger_state,hand_charger_state,charger_distance,thermal_infrared,vcc_motor_state,vcc_pc_state,pc_boot_up_state,break_stop_state,control_quality,chassis_online,col_drop_alarm,over_speed_state,motor1_online_state,motor2_online_state,motor1_mode_state,motor2_mode_state,motor1_fault_state,motor2_fault_state,mqtt_online,mqtt_get_topic_state,mqtt_command

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(dissensor, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.ult is None:
        self.ult = []
      if self.laser is None:
        self.laser = []
      if self.drop is None:
        self.drop = []
      if self.collision is None:
        self.collision = 0
      if self.uwb_rssi is None:
        self.uwb_rssi = 0.
      if self.uwb_distance is None:
        self.uwb_distance = 0.
      if self.ibeacon_rssi is None:
        self.ibeacon_rssi = 0.
      if self.ibeacon_distance is None:
        self.ibeacon_distance = 0.
      if self.button1 is None:
        self.button1 = 0
      if self.button2 is None:
        self.button2 = 0
      if self.atuo_charger_state is None:
        self.atuo_charger_state = 0
      if self.hand_charger_state is None:
        self.hand_charger_state = 0
      if self.charger_distance is None:
        self.charger_distance = 0
      if self.thermal_infrared is None:
        self.thermal_infrared = 0
      if self.vcc_motor_state is None:
        self.vcc_motor_state = 0
      if self.vcc_pc_state is None:
        self.vcc_pc_state = 0
      if self.pc_boot_up_state is None:
        self.pc_boot_up_state = 0
      if self.break_stop_state is None:
        self.break_stop_state = 0
      if self.control_quality is None:
        self.control_quality = 0
      if self.chassis_online is None:
        self.chassis_online = 0
      if self.col_drop_alarm is None:
        self.col_drop_alarm = 0
      if self.over_speed_state is None:
        self.over_speed_state = 0
      if self.motor1_online_state is None:
        self.motor1_online_state = 0
      if self.motor2_online_state is None:
        self.motor2_online_state = 0
      if self.motor1_mode_state is None:
        self.motor1_mode_state = 0
      if self.motor2_mode_state is None:
        self.motor2_mode_state = 0
      if self.motor1_fault_state is None:
        self.motor1_fault_state = 0
      if self.motor2_fault_state is None:
        self.motor2_fault_state = 0
      if self.mqtt_online is None:
        self.mqtt_online = 0
      if self.mqtt_get_topic_state is None:
        self.mqtt_get_topic_state = 0
      if self.mqtt_command is None:
        self.mqtt_command = 0
    else:
      self.header = std_msgs.msg.Header()
      self.ult = []
      self.laser = []
      self.drop = []
      self.collision = 0
      self.uwb_rssi = 0.
      self.uwb_distance = 0.
      self.ibeacon_rssi = 0.
      self.ibeacon_distance = 0.
      self.button1 = 0
      self.button2 = 0
      self.atuo_charger_state = 0
      self.hand_charger_state = 0
      self.charger_distance = 0
      self.thermal_infrared = 0
      self.vcc_motor_state = 0
      self.vcc_pc_state = 0
      self.pc_boot_up_state = 0
      self.break_stop_state = 0
      self.control_quality = 0
      self.chassis_online = 0
      self.col_drop_alarm = 0
      self.over_speed_state = 0
      self.motor1_online_state = 0
      self.motor2_online_state = 0
      self.motor1_mode_state = 0
      self.motor2_mode_state = 0
      self.motor1_fault_state = 0
      self.motor2_fault_state = 0
      self.mqtt_online = 0
      self.mqtt_get_topic_state = 0
      self.mqtt_command = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.ult)
      buff.write(_struct_I.pack(length))
      pattern = '<%sH'%length
      buff.write(struct.pack(pattern, *self.ult))
      length = len(self.laser)
      buff.write(_struct_I.pack(length))
      pattern = '<%sH'%length
      buff.write(struct.pack(pattern, *self.laser))
      length = len(self.drop)
      buff.write(_struct_I.pack(length))
      pattern = '<%sH'%length
      buff.write(struct.pack(pattern, *self.drop))
      _x = self
      buff.write(_get_struct_i4f4BH18B().pack(_x.collision, _x.uwb_rssi, _x.uwb_distance, _x.ibeacon_rssi, _x.ibeacon_distance, _x.button1, _x.button2, _x.atuo_charger_state, _x.hand_charger_state, _x.charger_distance, _x.thermal_infrared, _x.vcc_motor_state, _x.vcc_pc_state, _x.pc_boot_up_state, _x.break_stop_state, _x.control_quality, _x.chassis_online, _x.col_drop_alarm, _x.over_speed_state, _x.motor1_online_state, _x.motor2_online_state, _x.motor1_mode_state, _x.motor2_mode_state, _x.motor1_fault_state, _x.motor2_fault_state, _x.mqtt_online, _x.mqtt_get_topic_state, _x.mqtt_command))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sH'%length
      start = end
      end += struct.calcsize(pattern)
      self.ult = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sH'%length
      start = end
      end += struct.calcsize(pattern)
      self.laser = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sH'%length
      start = end
      end += struct.calcsize(pattern)
      self.drop = struct.unpack(pattern, str[start:end])
      _x = self
      start = end
      end += 44
      (_x.collision, _x.uwb_rssi, _x.uwb_distance, _x.ibeacon_rssi, _x.ibeacon_distance, _x.button1, _x.button2, _x.atuo_charger_state, _x.hand_charger_state, _x.charger_distance, _x.thermal_infrared, _x.vcc_motor_state, _x.vcc_pc_state, _x.pc_boot_up_state, _x.break_stop_state, _x.control_quality, _x.chassis_online, _x.col_drop_alarm, _x.over_speed_state, _x.motor1_online_state, _x.motor2_online_state, _x.motor1_mode_state, _x.motor2_mode_state, _x.motor1_fault_state, _x.motor2_fault_state, _x.mqtt_online, _x.mqtt_get_topic_state, _x.mqtt_command,) = _get_struct_i4f4BH18B().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.ult)
      buff.write(_struct_I.pack(length))
      pattern = '<%sH'%length
      buff.write(self.ult.tostring())
      length = len(self.laser)
      buff.write(_struct_I.pack(length))
      pattern = '<%sH'%length
      buff.write(self.laser.tostring())
      length = len(self.drop)
      buff.write(_struct_I.pack(length))
      pattern = '<%sH'%length
      buff.write(self.drop.tostring())
      _x = self
      buff.write(_get_struct_i4f4BH18B().pack(_x.collision, _x.uwb_rssi, _x.uwb_distance, _x.ibeacon_rssi, _x.ibeacon_distance, _x.button1, _x.button2, _x.atuo_charger_state, _x.hand_charger_state, _x.charger_distance, _x.thermal_infrared, _x.vcc_motor_state, _x.vcc_pc_state, _x.pc_boot_up_state, _x.break_stop_state, _x.control_quality, _x.chassis_online, _x.col_drop_alarm, _x.over_speed_state, _x.motor1_online_state, _x.motor2_online_state, _x.motor1_mode_state, _x.motor2_mode_state, _x.motor1_fault_state, _x.motor2_fault_state, _x.mqtt_online, _x.mqtt_get_topic_state, _x.mqtt_command))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sH'%length
      start = end
      end += struct.calcsize(pattern)
      self.ult = numpy.frombuffer(str[start:end], dtype=numpy.uint16, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sH'%length
      start = end
      end += struct.calcsize(pattern)
      self.laser = numpy.frombuffer(str[start:end], dtype=numpy.uint16, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sH'%length
      start = end
      end += struct.calcsize(pattern)
      self.drop = numpy.frombuffer(str[start:end], dtype=numpy.uint16, count=length)
      _x = self
      start = end
      end += 44
      (_x.collision, _x.uwb_rssi, _x.uwb_distance, _x.ibeacon_rssi, _x.ibeacon_distance, _x.button1, _x.button2, _x.atuo_charger_state, _x.hand_charger_state, _x.charger_distance, _x.thermal_infrared, _x.vcc_motor_state, _x.vcc_pc_state, _x.pc_boot_up_state, _x.break_stop_state, _x.control_quality, _x.chassis_online, _x.col_drop_alarm, _x.over_speed_state, _x.motor1_online_state, _x.motor2_online_state, _x.motor1_mode_state, _x.motor2_mode_state, _x.motor1_fault_state, _x.motor2_fault_state, _x.mqtt_online, _x.mqtt_get_topic_state, _x.mqtt_command,) = _get_struct_i4f4BH18B().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_i4f4BH18B = None
def _get_struct_i4f4BH18B():
    global _struct_i4f4BH18B
    if _struct_i4f4BH18B is None:
        _struct_i4f4BH18B = struct.Struct("<i4f4BH18B")
    return _struct_i4f4BH18B
