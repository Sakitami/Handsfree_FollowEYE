# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from handsfree_msgs/robot_time.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import std_msgs.msg

class robot_time(genpy.Message):
  _md5sum = "970fa28eb053d7185662412c8d6a1b9e"
  _type = "handsfree_msgs/robot_time"
  _has_header = True #flag to mark the presence of a Header object
  _full_text = """std_msgs/Header header
uint8 local_time_valid
uint16 local_time_year
uint8 local_time_month
uint8 local_time_date
uint8 local_time_week
uint8 local_time_hour
uint8 local_time_min
uint8 local_time_sec

uint8 work_time1_sec
uint8 work_time1_min
uint8 work_time1_hour

uint8 work_time2_sec
uint8 work_time2_min
uint8 work_time2_hour

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id
"""
  __slots__ = ['header','local_time_valid','local_time_year','local_time_month','local_time_date','local_time_week','local_time_hour','local_time_min','local_time_sec','work_time1_sec','work_time1_min','work_time1_hour','work_time2_sec','work_time2_min','work_time2_hour']
  _slot_types = ['std_msgs/Header','uint8','uint16','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,local_time_valid,local_time_year,local_time_month,local_time_date,local_time_week,local_time_hour,local_time_min,local_time_sec,work_time1_sec,work_time1_min,work_time1_hour,work_time2_sec,work_time2_min,work_time2_hour

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(robot_time, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.local_time_valid is None:
        self.local_time_valid = 0
      if self.local_time_year is None:
        self.local_time_year = 0
      if self.local_time_month is None:
        self.local_time_month = 0
      if self.local_time_date is None:
        self.local_time_date = 0
      if self.local_time_week is None:
        self.local_time_week = 0
      if self.local_time_hour is None:
        self.local_time_hour = 0
      if self.local_time_min is None:
        self.local_time_min = 0
      if self.local_time_sec is None:
        self.local_time_sec = 0
      if self.work_time1_sec is None:
        self.work_time1_sec = 0
      if self.work_time1_min is None:
        self.work_time1_min = 0
      if self.work_time1_hour is None:
        self.work_time1_hour = 0
      if self.work_time2_sec is None:
        self.work_time2_sec = 0
      if self.work_time2_min is None:
        self.work_time2_min = 0
      if self.work_time2_hour is None:
        self.work_time2_hour = 0
    else:
      self.header = std_msgs.msg.Header()
      self.local_time_valid = 0
      self.local_time_year = 0
      self.local_time_month = 0
      self.local_time_date = 0
      self.local_time_week = 0
      self.local_time_hour = 0
      self.local_time_min = 0
      self.local_time_sec = 0
      self.work_time1_sec = 0
      self.work_time1_min = 0
      self.work_time1_hour = 0
      self.work_time2_sec = 0
      self.work_time2_min = 0
      self.work_time2_hour = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_BH12B().pack(_x.local_time_valid, _x.local_time_year, _x.local_time_month, _x.local_time_date, _x.local_time_week, _x.local_time_hour, _x.local_time_min, _x.local_time_sec, _x.work_time1_sec, _x.work_time1_min, _x.work_time1_hour, _x.work_time2_sec, _x.work_time2_min, _x.work_time2_hour))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 15
      (_x.local_time_valid, _x.local_time_year, _x.local_time_month, _x.local_time_date, _x.local_time_week, _x.local_time_hour, _x.local_time_min, _x.local_time_sec, _x.work_time1_sec, _x.work_time1_min, _x.work_time1_hour, _x.work_time2_sec, _x.work_time2_min, _x.work_time2_hour,) = _get_struct_BH12B().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_BH12B().pack(_x.local_time_valid, _x.local_time_year, _x.local_time_month, _x.local_time_date, _x.local_time_week, _x.local_time_hour, _x.local_time_min, _x.local_time_sec, _x.work_time1_sec, _x.work_time1_min, _x.work_time1_hour, _x.work_time2_sec, _x.work_time2_min, _x.work_time2_hour))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 15
      (_x.local_time_valid, _x.local_time_year, _x.local_time_month, _x.local_time_date, _x.local_time_week, _x.local_time_hour, _x.local_time_min, _x.local_time_sec, _x.work_time1_sec, _x.work_time1_min, _x.work_time1_hour, _x.work_time2_sec, _x.work_time2_min, _x.work_time2_hour,) = _get_struct_BH12B().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_BH12B = None
def _get_struct_BH12B():
    global _struct_BH12B
    if _struct_BH12B is None:
        _struct_BH12B = struct.Struct("<BH12B")
    return _struct_BH12B
