// Generated by gencpp from file handsfree_arm_msgs/ArmBehaviorGoal.msg
// DO NOT EDIT!


#ifndef HANDSFREE_ARM_MSGS_MESSAGE_ARMBEHAVIORGOAL_H
#define HANDSFREE_ARM_MSGS_MESSAGE_ARMBEHAVIORGOAL_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace handsfree_arm_msgs
{
template <class ContainerAllocator>
struct ArmBehaviorGoal_
{
  typedef ArmBehaviorGoal_<ContainerAllocator> Type;

  ArmBehaviorGoal_()
    : behavior()
    , target_name()
    , gripper_type()  {
    }
  ArmBehaviorGoal_(const ContainerAllocator& _alloc)
    : behavior(_alloc)
    , target_name(_alloc)
    , gripper_type(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _behavior_type;
  _behavior_type behavior;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _target_name_type;
  _target_name_type target_name;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _gripper_type_type;
  _gripper_type_type gripper_type;





  typedef boost::shared_ptr< ::handsfree_arm_msgs::ArmBehaviorGoal_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::handsfree_arm_msgs::ArmBehaviorGoal_<ContainerAllocator> const> ConstPtr;

}; // struct ArmBehaviorGoal_

typedef ::handsfree_arm_msgs::ArmBehaviorGoal_<std::allocator<void> > ArmBehaviorGoal;

typedef boost::shared_ptr< ::handsfree_arm_msgs::ArmBehaviorGoal > ArmBehaviorGoalPtr;
typedef boost::shared_ptr< ::handsfree_arm_msgs::ArmBehaviorGoal const> ArmBehaviorGoalConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::handsfree_arm_msgs::ArmBehaviorGoal_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::handsfree_arm_msgs::ArmBehaviorGoal_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace handsfree_arm_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'actionlib_msgs': ['/opt/ros/kinetic/share/actionlib_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'handsfree_arm_msgs': ['/home/handsfree/handsfree/handsfree_ros_ws/src/handsfree_arm/handsfree_arm_msgs/msg', '/home/handsfree/handsfree/handsfree_ros_ws/devel/share/handsfree_arm_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::handsfree_arm_msgs::ArmBehaviorGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::handsfree_arm_msgs::ArmBehaviorGoal_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::handsfree_arm_msgs::ArmBehaviorGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::handsfree_arm_msgs::ArmBehaviorGoal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::handsfree_arm_msgs::ArmBehaviorGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::handsfree_arm_msgs::ArmBehaviorGoal_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::handsfree_arm_msgs::ArmBehaviorGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "89dd3fcaa7b1c32e3d5e8baa725fcb21";
  }

  static const char* value(const ::handsfree_arm_msgs::ArmBehaviorGoal_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x89dd3fcaa7b1c32eULL;
  static const uint64_t static_value2 = 0x3d5e8baa725fcb21ULL;
};

template<class ContainerAllocator>
struct DataType< ::handsfree_arm_msgs::ArmBehaviorGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "handsfree_arm_msgs/ArmBehaviorGoal";
  }

  static const char* value(const ::handsfree_arm_msgs::ArmBehaviorGoal_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::handsfree_arm_msgs::ArmBehaviorGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\
#goal defin\n\
string behavior\n\
string target_name\n\
string gripper_type\n\
";
  }

  static const char* value(const ::handsfree_arm_msgs::ArmBehaviorGoal_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::handsfree_arm_msgs::ArmBehaviorGoal_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.behavior);
      stream.next(m.target_name);
      stream.next(m.gripper_type);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ArmBehaviorGoal_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::handsfree_arm_msgs::ArmBehaviorGoal_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::handsfree_arm_msgs::ArmBehaviorGoal_<ContainerAllocator>& v)
  {
    s << indent << "behavior: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.behavior);
    s << indent << "target_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.target_name);
    s << indent << "gripper_type: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.gripper_type);
  }
};

} // namespace message_operations
} // namespace ros

#endif // HANDSFREE_ARM_MSGS_MESSAGE_ARMBEHAVIORGOAL_H
