// Generated by gencpp from file handsfree_arm_msgs/arm_state.msg
// DO NOT EDIT!


#ifndef HANDSFREE_ARM_MSGS_MESSAGE_ARM_STATE_H
#define HANDSFREE_ARM_MSGS_MESSAGE_ARM_STATE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <handsfree_arm_msgs/arm_joints_state.h>
#include <handsfree_arm_msgs/PoseEuler.h>
#include <handsfree_arm_msgs/PoseEuler.h>

namespace handsfree_arm_msgs
{
template <class ContainerAllocator>
struct arm_state_
{
  typedef arm_state_<ContainerAllocator> Type;

  arm_state_()
    : header()
    , status(0)
    , voltage(0.0)
    , current(0.0)
    , joints()
    , end_pose()
    , gripper_pose()  {
    }
  arm_state_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , status(0)
    , voltage(0.0)
    , current(0.0)
    , joints(_alloc)
    , end_pose(_alloc)
    , gripper_pose(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint8_t _status_type;
  _status_type status;

   typedef float _voltage_type;
  _voltage_type voltage;

   typedef float _current_type;
  _current_type current;

   typedef  ::handsfree_arm_msgs::arm_joints_state_<ContainerAllocator>  _joints_type;
  _joints_type joints;

   typedef  ::handsfree_arm_msgs::PoseEuler_<ContainerAllocator>  _end_pose_type;
  _end_pose_type end_pose;

   typedef  ::handsfree_arm_msgs::PoseEuler_<ContainerAllocator>  _gripper_pose_type;
  _gripper_pose_type gripper_pose;





  typedef boost::shared_ptr< ::handsfree_arm_msgs::arm_state_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::handsfree_arm_msgs::arm_state_<ContainerAllocator> const> ConstPtr;

}; // struct arm_state_

typedef ::handsfree_arm_msgs::arm_state_<std::allocator<void> > arm_state;

typedef boost::shared_ptr< ::handsfree_arm_msgs::arm_state > arm_statePtr;
typedef boost::shared_ptr< ::handsfree_arm_msgs::arm_state const> arm_stateConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::handsfree_arm_msgs::arm_state_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::handsfree_arm_msgs::arm_state_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace handsfree_arm_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'actionlib_msgs': ['/opt/ros/kinetic/share/actionlib_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'handsfree_arm_msgs': ['/home/handsfree/handsfree/handsfree_ros_ws/src/handsfree_arm/handsfree_arm_msgs/msg', '/home/handsfree/handsfree/handsfree_ros_ws/devel/share/handsfree_arm_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::handsfree_arm_msgs::arm_state_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::handsfree_arm_msgs::arm_state_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::handsfree_arm_msgs::arm_state_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::handsfree_arm_msgs::arm_state_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::handsfree_arm_msgs::arm_state_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::handsfree_arm_msgs::arm_state_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::handsfree_arm_msgs::arm_state_<ContainerAllocator> >
{
  static const char* value()
  {
    return "89ee41d32f087562c4c5ab41d1874e2c";
  }

  static const char* value(const ::handsfree_arm_msgs::arm_state_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x89ee41d32f087562ULL;
  static const uint64_t static_value2 = 0xc4c5ab41d1874e2cULL;
};

template<class ContainerAllocator>
struct DataType< ::handsfree_arm_msgs::arm_state_<ContainerAllocator> >
{
  static const char* value()
  {
    return "handsfree_arm_msgs/arm_state";
  }

  static const char* value(const ::handsfree_arm_msgs::arm_state_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::handsfree_arm_msgs::arm_state_<ContainerAllocator> >
{
  static const char* value()
  {
    return "std_msgs/Header header\n\
\n\
#0~7bit , 0: online/offline\n\
uint8 status\n\
\n\
# V\n\
float32 voltage\n\
\n\
# A\n\
float32 current\n\
\n\
handsfree_arm_msgs/arm_joints_state joints\n\
\n\
handsfree_arm_msgs/PoseEuler end_pose\n\
\n\
handsfree_arm_msgs/PoseEuler gripper_pose\n\
\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: handsfree_arm_msgs/arm_joints_state\n\
uint8[] id\n\
\n\
#0~7bit , 0: online/offline\n\
uint8[] status\n\
\n\
# V\n\
float32[] voltage\n\
\n\
# A\n\
float32[] current\n\
\n\
float32[] load\n\
\n\
# centigrade\n\
float32[] temperature\n\
\n\
# radian\n\
float32[] position\n\
\n\
# radian\n\
float32[] speed\n\
\n\
================================================================================\n\
MSG: handsfree_arm_msgs/PoseEuler\n\
float64 x\n\
float64 y\n\
float64 z\n\
float64 roll\n\
float64 pitch\n\
float64 yaw\n\
";
  }

  static const char* value(const ::handsfree_arm_msgs::arm_state_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::handsfree_arm_msgs::arm_state_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.status);
      stream.next(m.voltage);
      stream.next(m.current);
      stream.next(m.joints);
      stream.next(m.end_pose);
      stream.next(m.gripper_pose);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct arm_state_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::handsfree_arm_msgs::arm_state_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::handsfree_arm_msgs::arm_state_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "status: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.status);
    s << indent << "voltage: ";
    Printer<float>::stream(s, indent + "  ", v.voltage);
    s << indent << "current: ";
    Printer<float>::stream(s, indent + "  ", v.current);
    s << indent << "joints: ";
    s << std::endl;
    Printer< ::handsfree_arm_msgs::arm_joints_state_<ContainerAllocator> >::stream(s, indent + "  ", v.joints);
    s << indent << "end_pose: ";
    s << std::endl;
    Printer< ::handsfree_arm_msgs::PoseEuler_<ContainerAllocator> >::stream(s, indent + "  ", v.end_pose);
    s << indent << "gripper_pose: ";
    s << std::endl;
    Printer< ::handsfree_arm_msgs::PoseEuler_<ContainerAllocator> >::stream(s, indent + "  ", v.gripper_pose);
  }
};

} // namespace message_operations
} // namespace ros

#endif // HANDSFREE_ARM_MSGS_MESSAGE_ARM_STATE_H
