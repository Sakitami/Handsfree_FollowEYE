// Generated by gencpp from file handsfree_msgs/dissensor.msg
// DO NOT EDIT!


#ifndef HANDSFREE_MSGS_MESSAGE_DISSENSOR_H
#define HANDSFREE_MSGS_MESSAGE_DISSENSOR_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace handsfree_msgs
{
template <class ContainerAllocator>
struct dissensor_
{
  typedef dissensor_<ContainerAllocator> Type;

  dissensor_()
    : header()
    , ult()
    , laser()
    , drop()
    , collision(0)
    , uwb_rssi(0.0)
    , uwb_distance(0.0)
    , ibeacon_rssi(0.0)
    , ibeacon_distance(0.0)
    , button1(0)
    , button2(0)
    , atuo_charger_state(0)
    , hand_charger_state(0)
    , charger_distance(0)
    , thermal_infrared(0)
    , vcc_motor_state(0)
    , vcc_pc_state(0)
    , pc_boot_up_state(0)
    , break_stop_state(0)
    , control_quality(0)
    , chassis_online(0)
    , col_drop_alarm(0)
    , over_speed_state(0)
    , motor1_online_state(0)
    , motor2_online_state(0)
    , motor1_mode_state(0)
    , motor2_mode_state(0)
    , motor1_fault_state(0)
    , motor2_fault_state(0)
    , mqtt_online(0)
    , mqtt_get_topic_state(0)
    , mqtt_command(0)  {
    }
  dissensor_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , ult(_alloc)
    , laser(_alloc)
    , drop(_alloc)
    , collision(0)
    , uwb_rssi(0.0)
    , uwb_distance(0.0)
    , ibeacon_rssi(0.0)
    , ibeacon_distance(0.0)
    , button1(0)
    , button2(0)
    , atuo_charger_state(0)
    , hand_charger_state(0)
    , charger_distance(0)
    , thermal_infrared(0)
    , vcc_motor_state(0)
    , vcc_pc_state(0)
    , pc_boot_up_state(0)
    , break_stop_state(0)
    , control_quality(0)
    , chassis_online(0)
    , col_drop_alarm(0)
    , over_speed_state(0)
    , motor1_online_state(0)
    , motor2_online_state(0)
    , motor1_mode_state(0)
    , motor2_mode_state(0)
    , motor1_fault_state(0)
    , motor2_fault_state(0)
    , mqtt_online(0)
    , mqtt_get_topic_state(0)
    , mqtt_command(0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef std::vector<uint16_t, typename ContainerAllocator::template rebind<uint16_t>::other >  _ult_type;
  _ult_type ult;

   typedef std::vector<uint16_t, typename ContainerAllocator::template rebind<uint16_t>::other >  _laser_type;
  _laser_type laser;

   typedef std::vector<uint16_t, typename ContainerAllocator::template rebind<uint16_t>::other >  _drop_type;
  _drop_type drop;

   typedef int32_t _collision_type;
  _collision_type collision;

   typedef float _uwb_rssi_type;
  _uwb_rssi_type uwb_rssi;

   typedef float _uwb_distance_type;
  _uwb_distance_type uwb_distance;

   typedef float _ibeacon_rssi_type;
  _ibeacon_rssi_type ibeacon_rssi;

   typedef float _ibeacon_distance_type;
  _ibeacon_distance_type ibeacon_distance;

   typedef uint8_t _button1_type;
  _button1_type button1;

   typedef uint8_t _button2_type;
  _button2_type button2;

   typedef uint8_t _atuo_charger_state_type;
  _atuo_charger_state_type atuo_charger_state;

   typedef uint8_t _hand_charger_state_type;
  _hand_charger_state_type hand_charger_state;

   typedef uint16_t _charger_distance_type;
  _charger_distance_type charger_distance;

   typedef uint8_t _thermal_infrared_type;
  _thermal_infrared_type thermal_infrared;

   typedef uint8_t _vcc_motor_state_type;
  _vcc_motor_state_type vcc_motor_state;

   typedef uint8_t _vcc_pc_state_type;
  _vcc_pc_state_type vcc_pc_state;

   typedef uint8_t _pc_boot_up_state_type;
  _pc_boot_up_state_type pc_boot_up_state;

   typedef uint8_t _break_stop_state_type;
  _break_stop_state_type break_stop_state;

   typedef uint8_t _control_quality_type;
  _control_quality_type control_quality;

   typedef uint8_t _chassis_online_type;
  _chassis_online_type chassis_online;

   typedef uint8_t _col_drop_alarm_type;
  _col_drop_alarm_type col_drop_alarm;

   typedef uint8_t _over_speed_state_type;
  _over_speed_state_type over_speed_state;

   typedef uint8_t _motor1_online_state_type;
  _motor1_online_state_type motor1_online_state;

   typedef uint8_t _motor2_online_state_type;
  _motor2_online_state_type motor2_online_state;

   typedef uint8_t _motor1_mode_state_type;
  _motor1_mode_state_type motor1_mode_state;

   typedef uint8_t _motor2_mode_state_type;
  _motor2_mode_state_type motor2_mode_state;

   typedef uint8_t _motor1_fault_state_type;
  _motor1_fault_state_type motor1_fault_state;

   typedef uint8_t _motor2_fault_state_type;
  _motor2_fault_state_type motor2_fault_state;

   typedef uint8_t _mqtt_online_type;
  _mqtt_online_type mqtt_online;

   typedef uint8_t _mqtt_get_topic_state_type;
  _mqtt_get_topic_state_type mqtt_get_topic_state;

   typedef uint8_t _mqtt_command_type;
  _mqtt_command_type mqtt_command;





  typedef boost::shared_ptr< ::handsfree_msgs::dissensor_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::handsfree_msgs::dissensor_<ContainerAllocator> const> ConstPtr;

}; // struct dissensor_

typedef ::handsfree_msgs::dissensor_<std::allocator<void> > dissensor;

typedef boost::shared_ptr< ::handsfree_msgs::dissensor > dissensorPtr;
typedef boost::shared_ptr< ::handsfree_msgs::dissensor const> dissensorConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::handsfree_msgs::dissensor_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::handsfree_msgs::dissensor_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace handsfree_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'handsfree_msgs': ['/home/handsfree/handsfree/handsfree_ros_ws/src/handsfree/handsfree_msgs/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::handsfree_msgs::dissensor_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::handsfree_msgs::dissensor_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::handsfree_msgs::dissensor_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::handsfree_msgs::dissensor_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::handsfree_msgs::dissensor_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::handsfree_msgs::dissensor_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::handsfree_msgs::dissensor_<ContainerAllocator> >
{
  static const char* value()
  {
    return "f0ccb07ca256b41b8ed9b394dd2e9265";
  }

  static const char* value(const ::handsfree_msgs::dissensor_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xf0ccb07ca256b41bULL;
  static const uint64_t static_value2 = 0x8ed9b394dd2e9265ULL;
};

template<class ContainerAllocator>
struct DataType< ::handsfree_msgs::dissensor_<ContainerAllocator> >
{
  static const char* value()
  {
    return "handsfree_msgs/dissensor";
  }

  static const char* value(const ::handsfree_msgs::dissensor_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::handsfree_msgs::dissensor_<ContainerAllocator> >
{
  static const char* value()
  {
    return "std_msgs/Header header\n\
uint16[] ult\n\
uint16[] laser\n\
uint16[] drop\n\
int32 collision\n\
float32 uwb_rssi\n\
float32 uwb_distance\n\
float32 ibeacon_rssi\n\
float32 ibeacon_distance\n\
\n\
#0(not click) 1(click) 2(double-click) 3(long-press)\n\
uint8 button1\n\
uint8 button2\n\
\n\
#0 1(charging) 2(Charged)\n\
uint8 atuo_charger_state \n\
uint8 hand_charger_state\n\
\n\
#unit: 20~2000mm \n\
uint16 charger_distance \n\
\n\
#0(not find people) 1(find people)\n\
uint8 thermal_infrared\n\
\n\
uint8 vcc_motor_state\n\
uint8 vcc_pc_state\n\
uint8 pc_boot_up_state\n\
uint8 break_stop_state\n\
\n\
uint8 control_quality\n\
uint8 chassis_online\n\
uint8 col_drop_alarm\n\
uint8 over_speed_state\n\
uint8 motor1_online_state\n\
uint8 motor2_online_state\n\
uint8 motor1_mode_state\n\
uint8 motor2_mode_state\n\
uint8 motor1_fault_state\n\
uint8 motor2_fault_state\n\
\n\
uint8 mqtt_online\n\
uint8 mqtt_get_topic_state\n\
uint8 mqtt_command\n\
\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
";
  }

  static const char* value(const ::handsfree_msgs::dissensor_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::handsfree_msgs::dissensor_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.ult);
      stream.next(m.laser);
      stream.next(m.drop);
      stream.next(m.collision);
      stream.next(m.uwb_rssi);
      stream.next(m.uwb_distance);
      stream.next(m.ibeacon_rssi);
      stream.next(m.ibeacon_distance);
      stream.next(m.button1);
      stream.next(m.button2);
      stream.next(m.atuo_charger_state);
      stream.next(m.hand_charger_state);
      stream.next(m.charger_distance);
      stream.next(m.thermal_infrared);
      stream.next(m.vcc_motor_state);
      stream.next(m.vcc_pc_state);
      stream.next(m.pc_boot_up_state);
      stream.next(m.break_stop_state);
      stream.next(m.control_quality);
      stream.next(m.chassis_online);
      stream.next(m.col_drop_alarm);
      stream.next(m.over_speed_state);
      stream.next(m.motor1_online_state);
      stream.next(m.motor2_online_state);
      stream.next(m.motor1_mode_state);
      stream.next(m.motor2_mode_state);
      stream.next(m.motor1_fault_state);
      stream.next(m.motor2_fault_state);
      stream.next(m.mqtt_online);
      stream.next(m.mqtt_get_topic_state);
      stream.next(m.mqtt_command);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct dissensor_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::handsfree_msgs::dissensor_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::handsfree_msgs::dissensor_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "ult[]" << std::endl;
    for (size_t i = 0; i < v.ult.size(); ++i)
    {
      s << indent << "  ult[" << i << "]: ";
      Printer<uint16_t>::stream(s, indent + "  ", v.ult[i]);
    }
    s << indent << "laser[]" << std::endl;
    for (size_t i = 0; i < v.laser.size(); ++i)
    {
      s << indent << "  laser[" << i << "]: ";
      Printer<uint16_t>::stream(s, indent + "  ", v.laser[i]);
    }
    s << indent << "drop[]" << std::endl;
    for (size_t i = 0; i < v.drop.size(); ++i)
    {
      s << indent << "  drop[" << i << "]: ";
      Printer<uint16_t>::stream(s, indent + "  ", v.drop[i]);
    }
    s << indent << "collision: ";
    Printer<int32_t>::stream(s, indent + "  ", v.collision);
    s << indent << "uwb_rssi: ";
    Printer<float>::stream(s, indent + "  ", v.uwb_rssi);
    s << indent << "uwb_distance: ";
    Printer<float>::stream(s, indent + "  ", v.uwb_distance);
    s << indent << "ibeacon_rssi: ";
    Printer<float>::stream(s, indent + "  ", v.ibeacon_rssi);
    s << indent << "ibeacon_distance: ";
    Printer<float>::stream(s, indent + "  ", v.ibeacon_distance);
    s << indent << "button1: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.button1);
    s << indent << "button2: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.button2);
    s << indent << "atuo_charger_state: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.atuo_charger_state);
    s << indent << "hand_charger_state: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.hand_charger_state);
    s << indent << "charger_distance: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.charger_distance);
    s << indent << "thermal_infrared: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.thermal_infrared);
    s << indent << "vcc_motor_state: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.vcc_motor_state);
    s << indent << "vcc_pc_state: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.vcc_pc_state);
    s << indent << "pc_boot_up_state: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.pc_boot_up_state);
    s << indent << "break_stop_state: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.break_stop_state);
    s << indent << "control_quality: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.control_quality);
    s << indent << "chassis_online: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.chassis_online);
    s << indent << "col_drop_alarm: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.col_drop_alarm);
    s << indent << "over_speed_state: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.over_speed_state);
    s << indent << "motor1_online_state: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.motor1_online_state);
    s << indent << "motor2_online_state: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.motor2_online_state);
    s << indent << "motor1_mode_state: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.motor1_mode_state);
    s << indent << "motor2_mode_state: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.motor2_mode_state);
    s << indent << "motor1_fault_state: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.motor1_fault_state);
    s << indent << "motor2_fault_state: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.motor2_fault_state);
    s << indent << "mqtt_online: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.mqtt_online);
    s << indent << "mqtt_get_topic_state: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.mqtt_get_topic_state);
    s << indent << "mqtt_command: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.mqtt_command);
  }
};

} // namespace message_operations
} // namespace ros

#endif // HANDSFREE_MSGS_MESSAGE_DISSENSOR_H
